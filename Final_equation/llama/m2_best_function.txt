================= Evaluated Function =================
def equation(time: np.ndarray, depth: np.ndarray, Area_m2: np.ndarray, Uw: np.ndarray, buoyancy: np.ndarray, ice: np.ndarray, snow: np.ndarray, snowice: np.ndarray, diffusivity: np.ndarray, temp_heat01: np.ndarray, params: np.ndarray) -> np.ndarray:
    """
    Return updated surface temperature after accounting for ice/snow effects.
    """
    """
    Update lake surface temperature after accounting for ice/snow effects.
    """
    
    # Calculate changes in ice thickness
    ice_growth_rate = params[0] * (temp_heat01 - buoyancy) * (Area_m2 / (Area_m2 + ice + snow))
    new_ice = np.clip(ice + params[1] * ice_growth_rate * (Area_m2 / (Area_m2 + ice + snow)), 0, None)
    
    # Calculate changes in snowpack thickness
    snow_growth_rate = params[2] * (temp_heat01 - params[3]) * (Area_m2 / (Area_m2 + ice + snow))
    new_snow = np.clip(snow + params[4] * snow_growth_rate * (Area_m2 / (Area_m2 + ice + snow)), 0, None)
    
    # Calculate conduction heat loss from the lake surface
    conduction_loss = params[5] * diffusivity * (temp_heat01 - params[6])
    
    # Calculate lake surface temperature updates
    dT_surface = params[7] * (new_ice - ice) + params[8] * (new_snow - snow) - conduction_loss
    
    # Add heating/cooling effects of growing/melting ice and snow
    if snowice.any():  # Checking if snowice exists
        dT_surface += params[9] * params[7] * (new_ice - ice)  # Add heat loss from growing ice
    elif np.any(new_ice < ice):
        dT_surface -= params[9] * params[7] * (new_ice - ice)  # Add heat gain from melting ice
    else:
        dT_surface -= params[9] * params[7] * (new_ice - ice) + params[9] * params[7] * (new_snow - snow)  # Both ice and snow
    
    # Update lake surface temperature
    new_surface_temp = temp_heat01 + dT_surface
    
    return new_surface_temp
------------------------------------------------------
