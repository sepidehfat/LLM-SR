================= Evaluated Function =================
def equation(time: np.ndarray, depth: np.ndarray, ice: np.ndarray, snow: np.ndarray, snowice: np.ndarray, temp_total05: np.ndarray, params: np.ndarray) -> np.ndarray:
    """
    Approximate vertical diffusion impact on temperature using input profiles.
    """
    """
    Updated version of the vertical diffusion equation, considering the thermal resistance of the ice, snow, and snow-ice layers.
    """
    K = params[0]
    dz = np.gradient(depth, axis=0)
    
    # Calculate Q at each layer. Note that a factor (K / dz) is included in the expression
    diffusion_term = -K / (dz * dz) * (np.roll(temp_total05, -1) - 2 * temp_total05 + np.roll(temp_total05, 1))
    ice_term = -params[1] * ice / (params[4] * dz) if np.any(ice) else 0
    snow_term = -params[2] * snow / (params[5] * dz) if np.any(snow) else 0
    snowice_term = -params[3] * snowice / (params[6] * dz) if np.any(snowice) else 0
    
    # The sum of the terms Q
    Q = diffusion_term + ice_term + snow_term + snowice_term
    
    # Apply the discretized diffusion equation
    temp_total05 = temp_total05 + Q * np.gradient(dz)
    
    return temp_total05
------------------------------------------------------