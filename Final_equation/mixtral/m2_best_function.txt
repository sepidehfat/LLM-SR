================= Evaluated Function =================
def equation(time: np.ndarray, depth: np.ndarray, Area_m2: np.ndarray, Uw: np.ndarray, buoyancy: np.ndarray, ice: np.ndarray, snow: np.ndarray, snowice: np.ndarray, diffusivity: np.ndarray, temp_heat01: np.ndarray, params: np.ndarray) -> np.ndarray:
    """
    Return updated surface temperature after accounting for ice/snow effects.
    """
    k_ice = params[0]  # thermal conductivity of ice layer (W/m*K)
    k_snow = params[1]  # thermal conductivity of snow layer (W/m*K)
    k_sol = params[8]  # solar heat transfer coefficient
    L_fus = params[2]  # latent heat of fusion for ice (J/kg)
    L_sub = params[3]  # latent heat of sublimation for snow (J/kg)
    rho_ice = params[4]  # density of ice (kg/m^3)
    rho_snow = params[5]  # density of snow (kg/m^3)
    alpha_ice = params[6]  # heat transfer coefficient of ice (W/m^2*K)
    alpha_lake = params[7]  # heat transfer coefficient of lake (W/m^2*K)
    g = 9.81 # acceleration due to gravity (m/s^2)
    
    Q_fus = np.where(temp_heat01 < 0, np.abs(temp_heat01) * rho_ice * L_fus * ice[np.newaxis, :], 0)
    Q_sub = np.where(temp_heat01 < 0, np.abs(temp_heat01) * rho_snow * L_sub * snow[np.newaxis, :], 0)
    q_ice = (temp_heat01 + Q_fus + Q_sub) * (alpha_ice / alpha_lake)
    
    q_snow = q_ice * (k_snow/k_ice)
    q_sol = k_sol * (snow * Q_fus + ice * (1 - Q_fus))
    q_total = q_ice + q_snow + q_sol
    
    return q_total
------------------------------------------------------
